import 'utils.adom'

const styles = file 'styles.css'

var tool = 0
var color = [191, 61, 64, 255]
var modalOpen = false
var history = []
var latest = []
var width = 64
var height = 64
// color picker
var hue = 0
var huePos = 6
var saturation = 50
var satPos = 96
var lightness = 50
var lightnessPos = 96

var colorPickerOpen = false
var newCanvasModalOpen = false
var exportModalOpen = false
var downloadModalOpen = false
var fileOpen = false

var url = ''

def UIController [Utils] ->
  const PENCIL = 0
  const ERASER = 1
  const LINE = 2
  const CIRCLE = 3
  const SQUARE = 4
  const FILL = 5
  const EYE_DROPPER = 6

  const CANVAS = document.querySelector('.main-canvas')
  const PREVIEW = document.querySelector('.preview-canvas')
  const BG = document.querySelector('#bg-canvas')
  
  let CANVAS_CTX = CANVAS.getContext('2d')
  let PREVIEW_CTX = PREVIEW.getContext('2d')
  let BG_CTX = BG.getContext('2d')
  let EMPTY = new ImageData(width, height)

  const setActiveTool = (e) => {
    tool = parseInt(e.target.dataset.index)
    $sync()
  }

  const openNewCanvasModal = () => {
    newCanvasModalOpen = true
    fileOpen = false
    $sync()
  }

  const closeNewCanvasModal = () => {
    newCanvasModalOpen = false
    $sync()
  }

  const openExportModal = () => {
    exportModalOpen = true
    fileOpen = false
    $sync()
  }

  const closeExportModal = () => {
    exportModalOpen = false
    $sync()
  }

  const openDownloadModal = () => {
    downloadModalOpen = true
    fileOpen = false
    $sync()
  }

  const closeDownloadModal = () => {
    downloadModalOpen = false
    $sync()
  }

  const toggleColorPicker = () => {
    const prev = colorPickerOpen
    colorPickerOpen = !prev

    $sync()
  }

  const toggleFile = () => {
    const prev = fileOpen
    fileOpen = !prev

    $sync()
  }

  const assignHSLtoRGB = (hue, saturation, lightness) => {
      const rgb = Utils.HSLtoRGB(hue, saturation, lightness)

      color[0] = rgb.r
      color[1] = rgb.g
      color[2] = rgb.b
  }

  const setHue = (e) => {
    if (e.buttons === 1 || e.type === 'touchmove' || e.type === 'touchstart') {
      const bb = e.target.getBoundingClientRect()
      
      const offset = e.touches ? e.touches[0].pageX - bb.left : e.offsetX
      
      const val = Math.floor(offset * (360 / e.target.clientWidth)) | 0;
      if (val < 0 || val >= 360) return
      hue = val
      huePos = Math.floor((hue / 360) * e.target.clientWidth) + 6

      assignHSLtoRGB(hue, saturation, lightness)
      
      $sync()
    }
  }

  const setSaturation = (e) => {
    if (e.buttons === 1 || e.type === 'touchmove' || e.type === 'touchstart') {
      const bb = e.target.getBoundingClientRect()
      
      const offset = e.touches ? e.touches[0].pageX - bb.left : e.offsetX
      document.querySelector('#debug').innerHTML = offset
      
      const val = Math.floor(offset * (100 / e.target.clientWidth)) | 0;
      if (val < 0 || val >= 100) return
      saturation = val
      satPos = Math.floor((saturation / 100) * e.target.clientWidth) + 6

      assignHSLtoRGB(hue, saturation, lightness)
      
      $sync()
    }
  }

  const setLightness = (e) => {
    if (e.buttons === 1 || e.type === 'touchmove' || e.type === 'touchstart') {
      const bb = e.target.getBoundingClientRect()
      
      const offset = e.touches ? e.touches[0].pageX - bb.left : e.offsetX
      document.querySelector('#debug').innerHTML = offset
      
      const val = Math.floor(offset * (100 / e.target.clientWidth)) | 0;
      if (val < 0 || val >= 100) return
      lightness = val
      lightnessPos = Math.floor((lightness / 100) * e.target.clientWidth) + 6

      assignHSLtoRGB(hue, saturation, lightness)
      
      $sync()
    }
  }

  const undo = async () => {
    if (!history[history.length - 2]) return 

    const latestImage = await Utils.base64ToImage(history[history.length - 2])
    CANVAS_CTX.clearRect(0, 0, width, height)
    CANVAS_CTX.drawImage(latestImage, 0, 0)

    history.pop()
    window.localStorage.setItem('pixel_history', JSON.stringify(history)) // clean up
  }

  const historyPushFrame = (canvasImgData) => {
    const base64 = Utils.imageDataToBase64(canvasImgData)
    
    history.push(base64)
    latest = base64.split('data:image/png;base64,')[1]

    if (history.length > 25) history.splice(0, 1)

    window.localStorage.setItem('pixel_history', JSON.stringify(history)) // clean up
  }

  const newCanvas = (e) => {
    const value = !e ? '100x100' : e.target.parentNode.parentNode.querySelector('#config-canvas-dimensions').value
    const split = value.split('x')
    const w = parseInt(split[0])
    const h = parseInt(split[1])

    width = w
    height = h
    CANVAS.width = w
    CANVAS.height = h
    PREVIEW.width = w
    PREVIEW.height = h
    BG.width = w
    BG.height = h

    CANVAS_CTX = CANVAS.getContext('2d')
    PREVIEW_CTX = PREVIEW.getContext('2d')
    BG_CTX = BG.getContext('2d')
    EMPTY = new ImageData(w, h)

    history = []
    historyPushFrame(CANVAS_CTX.getImageData(0, 0, width, height))

    window.localStorage.setItem('pixel_width', JSON.stringify(width)) // clean up
    window.localStorage.setItem('pixel_height', JSON.stringify(height)) // clean up

    drawTransparency()

    if (newCanvasModalOpen) {
      closeNewCanvasModal()
    }
  }

  const downloadCanvas = (e) => {
    const scaleFactor = parseInt(document.querySelector('#config-download-size').value)
    const c = document.createElement('canvas')
    const ctx = c.getContext('2d')

    c.width = width * scaleFactor
    c.height = height * scaleFactor
    ctx.webkitImageSmoothingEnabled = false
    ctx.mozImageSmoothingEnabled = false
    ctx.imageSmoothingEnabled = false
    ctx.drawImage(CANVAS, 0, 0, c.width, c.height)

    const image = c.toDataURL('image/png').replace('image/png', 'image/octet-stream')
    e.target.setAttribute('href', image)
  }

  const drawTransparency = () => {
    const imageData = BG_CTX.getImageData(0, 0, width, height)

    // Draw Transparency layer
    for (let x = 0; x < width; x++) {
      for (let y = 0; y < height; y++) {
        if (y % 2 === 0) {
          if (x % 2 === 0) {
            Utils.assignRGBATo(imageData.data, ((x + width * y) * 4), [128, 128, 128, 255], 0)
          } else {
            Utils.assignRGBATo(imageData.data, ((x + width * y) * 4), [211, 211, 211, 255], 0)
          }
        } else if (x % 2 !== 0) {
          Utils.assignRGBATo(imageData.data, ((x + width * y) * 4), [128, 128, 128, 255], 0)
        } else {
          Utils.assignRGBATo(imageData.data, ((x + width * y) * 4), [211, 211, 211, 255], 0)
        }
      }
    }

    BG_CTX.putImageData(imageData, 0, 0)
  }

  const main = async () => {
    // need to check for bad paths

    if (window.location.pathname.length > 1) {
      const base64 = `data:image/png;base64,${window.location.pathname.substr(1, window.location.pathname.length)}`
      const img = await Utils.base64ToImage(base64)

      width = img.width
      height = img.height
      history = []

      CANVAS.width = width
      CANVAS.height = height
      PREVIEW.width = width
      PREVIEW.height = height
      BG.width = width
      BG.height = height

      CANVAS_CTX = CANVAS.getContext('2d')
      PREVIEW_CTX = PREVIEW.getContext('2d')
      EMPTY = new ImageData(width, height)

      CANVAS_CTX.drawImage(img, 0, 0)

      historyPushFrame(CANVAS_CTX.getImageData(0, 0, width, height))
    } else {
      const savedHistory = window.localStorage.getItem('pixel_history')
      const savedWidth = window.localStorage.getItem('pixel_width')
      const savedHeight = window.localStorage.getItem('pixel_height')

      if (savedWidth) width = parseInt(savedWidth)
      if (savedHeight) height = parseInt(savedHeight)

      CANVAS.width = width
      CANVAS.height = height
      BG.width = width
      BG.height = height
    
      if (savedHistory) {
        history = JSON.parse(savedHistory)

        CANVAS.width = width
        CANVAS.height = height
        PREVIEW.width = width
        PREVIEW.height = height
        BG.width = width
        BG.height = height

        CANVAS_CTX = CANVAS.getContext('2d')
        PREVIEW_CTX = PREVIEW.getContext('2d')
        EMPTY = new ImageData(width, height)

        const latestImage = await Utils.base64ToImage(history[history.length - 1])

        CANVAS_CTX.drawImage(latestImage, 0, 0)

        historyPushFrame(CANVAS_CTX.getImageData(0, 0, width, height))
      } else {
        newCanvas()
      }
    }

    url = window.location.origin

    drawTransparency()
  }

  main ()

  const WINDOW = {}
  const resetWindow = () => {
    WINDOW.REQUEST = ''
    WINDOW.DATASET = {}
    WINDOW.MOUSE_DOWN = false
    WINDOW.START_X = 0
    WINDOW.START_Y = 0
    WINDOW.PREV_X = 0
    WINDOW.PREV_Y = 0
    WINDOW.CURR_X = 0
    WINDOW.CURR_Y = 0
  }
  resetWindow()

  const handleEvents = (e) => {
    // CANVAS specific, transforming points to canvas 
    const scaleX = CANVAS.clientWidth / CANVAS.width
    const scaleY = CANVAS.clientHeight / CANVAS.height
    const bb = CANVAS.getBoundingClientRect()

    const startX = Math.floor((WINDOW.START_X - bb.x) / scaleX)
    const startY = Math.floor((WINDOW.START_Y - bb.y) / scaleY)
    const prevX = Math.floor((WINDOW.PREV_X - bb.x) / scaleX)
    const prevY = Math.floor((WINDOW.PREV_Y - bb.y) / scaleY)
    const currX = Math.floor((WINDOW.CURR_X - bb.x) / scaleX)
    const currY = Math.floor((WINDOW.CURR_Y - bb.y) / scaleY)

    const canvasImgData = CANVAS_CTX.getImageData(0, 0, width, height)
    const previewImgData = PREVIEW_CTX.getImageData(0, 0, width, height)
    previewImgData.data.set(EMPTY.data)

    if (tool !== ERASER && tool !== EYE_DROPPER) {
      Utils.setPoint(
        previewImgData.data,
        currX,
        currY,
        width,
        height,
        color
      )
    }
    
    
    if (WINDOW.REQUEST === 'paintCanvas') {
      if (tool === PENCIL || tool === ERASER) {
        Utils.line(prevX, prevY, currX, currY, (x, y) => {
          Utils.setPoint(
            canvasImgData.data,
            x,
            y,
            width,
            height,
            tool === PENCIL ? color : [0, 0, 0, 0]
          )
        })
      }

      if (tool === LINE || tool === CIRCLE || tool === SQUARE) {
        const funcMap = {
          2: Utils.line,
          3: Utils.circle,
          4: Utils.square
        }

        funcMap[tool](startX, startY, currX, currY, (x, y) => {
          Utils.setPoint(
            (e.type === 'mousedown' || e.type === 'mousemove' || e.type === 'touchstart' || e.type === 'touchmove') ? previewImgData.data : canvasImgData.data,
            x,
            y,
            width,
            height,
            color
          )
        })
      }

      if (tool === FILL && e.type === 'mouseup') {
        Utils.fill(CANVAS_CTX, canvasImgData, width, height, currX, currY, color)
      }

      if (tool === EYE_DROPPER && e.type === 'mouseup') {
        color = Utils.getColorAtPixel(canvasImgData, currX, currY)

        if (color[3] === 0) return // don't do anything if empty pixel

        const hsl = Utils.RGBtoHSL(color[0], color[1], color[2])

        hue = hsl.h
        saturation = hsl.s
        lightness = hsl.l

        const width = document.querySelector('#color-slider').clientWidth // TODO: clean up, scattering dependencies
        huePos = Math.floor((hue / 360) * width) + 6
        satPos = Math.floor((saturation / 100) * width) + 6
        lightnessPos = Math.floor((lightness / 100) * width) + 6
        
        $sync()
      }

      if (e.type === 'mouseup' || e.type === 'touchend') {
        previewImgData.data.set(EMPTY.data)
        historyPushFrame(canvasImgData)
      }
    }

    PREVIEW_CTX.putImageData(previewImgData, 0, 0)
    CANVAS_CTX.putImageData(canvasImgData, 0, 0)
  }

  const gestureDown = (e) => {
    WINDOW.REQUEST = e.target.dataset.request
    WINDOW.DATASET = e.target.dataset
    WINDOW.MOUSE_DOWN = true
    WINDOW.START_X = (e.pageX === undefined) ? e.touches[0].pageX : e.pageX
    WINDOW.START_Y = (e.pageY === undefined) ? e.touches[0].pageY : e.pageY
    WINDOW.PREV_X = (e.pageX === undefined) ? e.touches[0].pageX : e.pageX
    WINDOW.PREV_Y = (e.pageY === undefined) ? e.touches[0].pageY : e.pageY
    WINDOW.CURR_X = (e.pageX === undefined) ? e.touches[0].pageX : e.pageX
    WINDOW.CURR_Y = (e.pageY === undefined) ? e.touches[0].pageY : e.pageY
  
    handleEvents(e)
  }

  window.addEventListener('mousedown', gestureDown)
  window.addEventListener('touchstart', gestureDown, { passive: false })  

  const gestureMove = (e) => {
    WINDOW.PREV_X = WINDOW.CURR_X
    WINDOW.PREV_Y = WINDOW.CURR_Y
    WINDOW.CURR_X = (e.pageX === undefined) ? e.touches[0].pageX : e.pageX
    WINDOW.CURR_Y = (e.pageY === undefined) ? e.touches[0].pageY : e.pageY
  
    handleEvents(e)
    
    // mapping cursors
    if (e.target.id === 'canvas-container' || e.target.id === 'canvas-window') {
      const cursorMap = ['crosshair', 'crosshair', 'crosshair', 'crosshair', 'crosshair', 'crosshair']
      e.target.style.cursor = cursorMap[tool]

      e.preventDefault()
    }
  }

  window.addEventListener('mousemove', gestureMove)
  window.addEventListener('touchmove', gestureMove, { passive: false })

  const gestureEnd = (e) => {
    handleEvents(e)
    resetWindow()
  }
  
  window.addEventListener('mouseup', gestureEnd)
  window.addEventListener('touchend', gestureEnd)

  window.addEventListener('contextmenu', (e) => {
    e.preventDefault()
  })

  const resizeCanvas = () => {
    if (window.innerWidth < 600) {
      CANVAS.parentNode.style.width = `${window.innerWidth}px`
      CANVAS.parentNode.style.height = `${window.innerWidth}px`
    }
  }
  
  window.addEventListener('resize', (e) => {
    resizeCanvas()
  })

  resizeCanvas()
<-

var iconDownload = file base64 'img/download.svg'
var iconUndo = file base64 'img/undo.svg'
var iconRedo = file base64 'img/redo.svg'
var iconFolderPlus = file base64 'img/folder-plus.svg'
var iconLink = file base64 'img/link.svg'
var iconBars = file base64 'img/bars.svg'
var tools = [
  file base64 'img/pencil.svg',
  file base64 'img/eraser.svg',
  file base64 'img/line.svg',
  file base64 'img/circle.svg',
  file base64 'img/square.svg',
  file base64 'img/fill.svg',
  file base64 'img/eye-dropper.svg'
  
]

doctype html5
html [
  head [
    meta charset="utf-8";
    meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no";
  ]
  style '{{styles}}'
  body class='bg-dark' style='height: 100%;' [
    div style='overflow: hidden;' [ 
      div #UIController class='bg-light bord-dark-b' style='min-height: 36px; max-height: 36px;' [
        div class='flex' style='width: 100%; max-width: 580px; margin: 0 auto;' [
          div class='fl-1 flex' [
            div class='flex' style='position: relative;' [
              button class='flex flex-center m-0 p-0 bord-dark-l' style='width: 35px;' on:mouseup={toggleFile} on:touchend={toggleFile}  [
                img src="data:image/svg+xml;base64,{{iconBars}}" ;
              ]
              div class='bg-light fl-column bord-dark' style='visibility:{{fileOpen ? "visible" : "hidden"}}; position: absolute; top: 100%; left: 0px; z-index: 5;' [
                button on:mouseup={openNewCanvasModal} on:touchend={openNewCanvasModal} class='m-0 p-h-10 h-35  flex flex-center-y' [
                  img src="data:image/svg+xml;base64,{{iconFolderPlus}}" ;
                  small class='bold p-h-10' 'New'
                ]
                button on:mouseup={openDownloadModal} on:touchend={openDownloadModal} class='m-0 p-h-10 h-35 flex flex-center-y' [
                  img src="data:image/svg+xml;base64,{{iconDownload}}" ;
                  small class='bold p-h-10' 'Download'
                ]
                button on:mouseup={openExportModal} on:touchend={openExportModal} class='m-0 p-h-10 h-35 flex flex-center-y' [
                  img src="data:image/svg+xml;base64,{{iconLink}}" ;
                  small class='bold p-h-10' 'Share'
                ]
              ]
            ]
            button on:mouseup={undo} class='w-min-35 w-max-35 h-35 bord-dark-l bord-dark-r p-h-10' [
              img src="data:image/svg+xml;base64,{{iconUndo}}" ;
            ]
          ]

                    // div class='fl-1 txt-right' [
            
          // ]
          div class='flex bord-dark-l bord-dark-r bord-dark-l' style='position: relative;' [
            each (t, i in tools) [
              button on:mouseup={setActiveTool} on:touchend={setActiveTool} data-index="{{i}}" class='w-35 h-35' style="background: {{tool == i ? '#3498db' : ''}};" [
                img src="data:image/svg+xml;base64,{{t}}" ;
              ]
            ]
            button on:mouseup={toggleColorPicker} on:touchend={toggleColorPicker} class='w-35 h-35 p-10 bord-dark-l' style='position: relative;' [
              div class='w-full h-full b-r-2' style="background: rgb({{color[0]}}, {{color[1]}}, {{color[2]}});" []
            ]
            div id='color-picker' class='bg-light bord-dark-t' style='visibility:{{colorPickerOpen ? "visible" : "hidden"}}; padding: 10px 15px; position: absolute; top: 100%; right: 0px; width: 100%; z-index: 5;' [
              div style='margin-bottom: 10px;' [
                div.flex style='justify-content: space-between; padding-bottom: 2px;' [
                  small.bold style='display: block; margin-bottom: 2px;' 'Hue'
                  small.txt-center style='padding-left: 10px; width: 30px;' '{{hue}}'
                ]
                div
                  id='color-slider'
                  on:mousedown={setHue}
                  on:touchstart={setHue}
                  on:mousemove={setHue}
                  on:touchmove={setHue}
                  class='fl-1 p-h-10 b-r-2 flex flex-center-y relative'
                  style='cursor: pointer; background: linear-gradient(to right, #ff0000 0%, #ffff00 17%, #00ff00 33%, #00ffff 50%, #0000ff 67%, #ff00ff 83%, #ff0000 100%);'
                [
                  div style='position: absolute; left: {{huePos}}px; width: 16px; height: 16px;  background: rgb(60, 60, 60); border-radius: 100%; pointer-events: none; border: 1px solid white;' []
                  input type='range' class='w-full m-0' min="0" max="100" style='visibility: hidden; pointer-events: none;';
                ]
              ]
              
              div style='margin-bottom: 10px;' [
                div.flex style='justify-content: space-between; padding-bottom: 2px;' [
                  small.bold style='display: block; margin-bottom: 2px;' 'Saturation'
                  small.txt-center style='padding-left: 10px; width: 30px;' '{{saturation}}'
                ]
                div
                  on:mousedown={setSaturation}
                  on:touchstart={setSaturation}
                  on:mousemove={setSaturation}
                  on:touchmove={setSaturation}
                  class='p-h-10 b-r-2 flex flex-center-y relative'
                  style='cursor: pointer; background: linear-gradient(to right, hsl({{hue}}, 0%, 50%) 0%,hsl({{hue}}, 100%, 50%) 100%);'
                [
                  div style='position: absolute; left: {{satPos}}px; width: 16px; height: 16px;  background: rgb(60, 60, 60); border-radius: 100%; pointer-events: none; border: 1px solid white;' []
                  input type='range' class='w-full m-0' min="0" max="100" style='visibility: hidden; pointer-events: none;';
                ]
              ]

              div [
                div.flex style='justify-content: space-between; padding-bottom: 2px;' [
                  small.bold style='display: block; margin-bottom: 2px;' 'Lightness'
                  small.txt-center style='padding-left: 10px; width: 30px;' '{{lightness}}'
                ]
                div
                  on:mousedown={setLightness}
                  on:touchstart={setLightness}
                  on:mousemove={setLightness}
                  on:touchmove={setLightness}
                  class='p-h-10 b-r-2 flex flex-center-y relative'
                  style='cursor: pointer; background: linear-gradient(to right, hsl({{hue}}, 100%, 0%) 0%, hsl({{hue}}, 100%, 50%) 50%, hsl({{hue}}, 100%, 100%) 100%)'
                [
                  div style='position: absolute; left: {{lightnessPos}}px; width: 16px; height: 16px;  background: rgb(60, 60, 60); border-radius: 100%; pointer-events: none; border: 1px solid white;' []
                  input type='range' class='w-full m-0' min="0" max="100" style='visibility: hidden; pointer-events: none;';
                ]
              ] 
            ]
          ]

        ]
        div class='w-full h-full flex flex-center-x' style='display: {{ newCanvasModalOpen ? "" : "none" }}; position: absolute; top: 0; left: 0; z-index: 5;' [
          div class='bord-r-2 w-full' style='max-width: 300px; overflow: hidden; margin-top: 175px; ' [
            div class='flex flex-center bg-mid bord-dark p-v-5' [
              small.bold "New Canvas"
            ]
            div class='p-10 bg-light' [
              div class='m-5 p-v-5' [
                div class='flex flex-center' [
                  small.bold style='width: 150px;' 'Dimensions'
                  select id='config-canvas-dimensions' class='w-full' [
                    option value='32x32' "32x32"
                    option value='50x50' "50x50"
                    option value='64x64' "64x64"
                    option value='100x100' "100x100"
                    option value='128x128' "128x128"
                    option value='256x256' "256x256"
                  ]
                ]
              ]
              div class='flex' style='padding-top: 5px;' [
                button class='b-r-2 bold p-5 w-full bg-red m-5' on:mouseup={closeNewCanvasModal} on:touchend={closeNewCanvasModal} 'Cancel'
                button class='b-r-2 bold p-5 w-full bg-green m-5' on:mouseup={newCanvas} on:touchend={newCanvas} 'Confirm'
              ]
            ]
          ]
        ]
        div class='w-full h-full flex flex-center-x' style='display: {{ exportModalOpen ? "" : "none" }}; position: absolute; top: 0; left: 0; z-index: 5;' [
          div class='bord-r-2 w-full' style='max-width: 300px; overflow: hidden; margin-top: 175px; ' [
            div class='flex flex-center bg-mid bord-dark p-v-5' [
              small.bold "Share"
            ]
            div class='p-10 bg-light' [
              div class='m-5 p-v-5' [
                div class='flex flex-center' [
                  small.bold style='width: 130px;' 'Share'
                  input class='w-full' type='text' value='{{url}}/{{latest}}';
                ]
              ]
              div class='flex' style='padding-top: 5px;' [
                button class='b-r-2 bold p-5 w-full bg-red m-5' on:mouseup={closeExportModal} on:touchend={closeExportModal} 'Close'
              ]
            ]
          ]
        ]

        div class='w-full h-full flex flex-center-x' style='display: {{ downloadModalOpen ? "" : "none" }}; position: absolute; top: 0; left: 0; z-index: 5;' [
          div class='bord-r-2 w-full' style='max-width: 250px; overflow: hidden; margin-top: 175px; ' [
            div class='flex flex-center bg-mid bord-dark p-v-5' [
              small.bold "Download"
            ]
            div class='p-10 bg-light' [
              div class='m-5 p-v-5' [
                div class='flex flex-center' [
                  small.bold style='width: 100px;' 'Size'
                  select id='config-download-size' class='w-full' [
                    option value='2' '2x'
                    option value='4' '4x'
                    option value='8' '8x'
                    option value='16' '16x'
                    option value='32' '32x'
                  ]
                ]
              ]
              div class='flex' style='padding-top: 5px;' [
                button class='b-r-2 bold p-5 w-full bg-red m-5' on:mouseup={closeDownloadModal} on:touchend={closeDownloadModal} 'Close'
                a class='w-full m-5 clickable' style='display: inline-block;' on:mouseup={downloadCanvas} on:touchend={downloadCanvas} download='pixel-art.png' [
                  button class='b-r-2 bold p-5 w-full bg-green' style='pointer-events: none;' 'Download'
                ]
              ]
            ]
          ]
        ]
      ]
      div id='canvas-window' style='height: calc(100% - 36px);' [
        p style='position: absolute; z-index: 10000; top: 0; left: 0; display: none;' id='debug';
        div id='canvas-container' class='fl-1 bord-dark-r h-full' style='overflow: hidden; text-align: center;' data-request='paintCanvas' [
          div style='display: inline-block; position: relative; width: 600px; height: 600px; margin: 30px 0px; pointer-events: none;' [
            canvas id='bg-canvas' class='w-full h-full' style='width: calc(100% - 20px); position: absolute; top: 0; left: 10px; z-index: 0;' width={width} height={height} []
            canvas class='main-canvas h-full' style='width: calc(100% - 20px); position: absolute; top: 0; left: 10px; z-index: 1;' width={width} height={height} []
            canvas id='preview-canvas' class='preview-canvas w-full h-full' style='width: calc(100% - 20px); position: absolute; top: 0; left: 10px; z-index: 2;' width={width} height={height} []
            canvas id='offscreen-canvas' style='display: none; position: absolute; top: 0; left: 0; z-index: 1;' width={width} height={height} []
          ]
        ]
      ]
    ]
  ]
]